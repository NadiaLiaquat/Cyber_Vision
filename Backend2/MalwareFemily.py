from PIL import ImageFile
import requests
import hashlib

from Backend2.ConfirmModelPrediction import ConfirmPredition

ImageFile.LOAD_TRUNCATED_IMAGES = True
import tensorflow as tf
import numpy as np
from keras.models import load_model
from keras.preprocessing import image
from keras.utils import load_img
import tensorflow as tf
import os


class MalwareFamilies:
    def __init__(self, malware_Address_With_Name, generatedImageAddress_With_Name):
        self._malware_Address_With_Name = malware_Address_With_Name
        self._generatedImageAddress_With_Name = generatedImageAddress_With_Name

    def _getFamily_Prediction_From_CNNModel(self):
        # model = load_model(
        #     'E:\Python-Projects\MachineLearning\Models\ModelsForFemilies\CNNModels\model_MalwareFemilyFirst.h5')
        current_dir = os.path.dirname(__file__)

        model_path = os.path.join(current_dir, 'Models', 'ModelsForFemilies', 'CNNModels',
                                  'model_MalwareFemilyFirst.h5')
        model = load_model(model_path)
        # try:
        #
        #     os.makedirs('Front_end/Backend2/Models/ModelsForFemilies/CNNModels', exist_ok=True)
        #     model = f'Front_end/Backend2/Models/ModelsForFemilies/CNNModels/model_MalwareFemilyFirst.h5'
        # except Exception as e:
        #     print(f"Malware_DetectionFamily Path issue is {str(e)}")
        img_path = self._generatedImageAddress_With_Name
        img_height, img_width = 64, 64
        img = tf.keras.utils.load_img(img_path, target_size=(img_height, img_width))
        img_array = tf.keras.preprocessing.image.img_to_array(img)
        img_array = np.array(img).astype(np.float32)
        img_array = np.expand_dims(img_array, axis=0)
        img_array /= 255.

        y_pred = model.predict(img_array)
        predicted_class = np.argmax(y_pred, axis=1)
        class_label = predicted_class[0]
        get_confidence = y_pred[0][class_label]

        class_labels = ["adware_img", "backdoor", 'botnet', 'downloader', 'keylogger', 'ransomware', 'rootkit',
                        'spyware', 'trojan', 'virus', 'worm']
        get_MalwareFamily = class_labels[class_label]
        confidence = get_confidence * 100
        return get_MalwareFamily, confidence

    def _getFamily_Prediction_From_MultiClassImageClassification(self):
        # model = load_model(
        #     'E:\Python-Projects\MachineLearning\Models\ModelsForFemilies\MultiClassificationModel\model_MulticlassificationFirst.h5')
        current_dir = os.path.dirname(__file__)

        # Define the relative path to the model
        model_path = os.path.join(current_dir, 'Models', 'ModelsForFemilies',
                                  'MultiClassificationModel', 'model_MulticlassificationFirst.h5')

        # Load the model
        model = load_model(model_path)
        # try:
        #
        #     os.makedirs('Front_end/Backend2/Models/ModelsForFemilies/MultiClassificationModel', exist_ok=True)
        #     model = f'Front_end/Backend2/Models/ModelsForFemilies/MultiClassificationModel/model_MulticlassificationFirst.h5'
        # except Exception as e:
        #     print(f"Malware_DetectionFamily Path issue is {str(e)}")
        img_path = self._generatedImageAddress_With_Name
        img_height, img_width = 64, 64
        img = tf.keras.utils.load_img(img_path, target_size=(img_height, img_width))
        img_array = tf.keras.preprocessing.image.img_to_array(img)
        img_array = np.array(img).astype(np.float32)
        img_array = np.expand_dims(img_array, axis=0)
        img_array /= 255.

        y_pred = model.predict(img_array)
        predicted_class = np.argmax(y_pred, axis=1)
        class_label = predicted_class[0]
        get_confidence = y_pred[0][class_label]

        class_labels = ["adware_img", "backdoor", 'botnet', 'downloader', 'keylogger', 'ransomware', 'rootkit',
                        'spyware', 'trojan', 'virus', 'worm']
        get_MalwareFamily = class_labels[class_label]
        confidence = get_confidence * 100
        return get_MalwareFamily, confidence

    def _getFamily_Prediction_From_ResNet(self):
        # model = load_model(
        #     'E:\Python-Projects\MachineLearning\Models\ModelsForFemilies\ResNetModels\my_modelResNetFemilyFinal.h5')
        current_dir = os.path.dirname(__file__)

        # Define the relative path to the model
        model_path = os.path.join(current_dir, 'Models', 'ModelsForFemilies', 'ResNetModels',
                                  'my_modelResNetFemilyFinal.h5')

        # Load the model
        model = load_model(model_path)
        # try:
        #
        #     os.makedirs('Front_end/Backend2/Models/ModelsForFemilies/ResNetModels', exist_ok=True)
        #     model = f'Front_end/Backend2/Models/ModelsForFemilies/ResNetModels/my_modelResNet.h5'
        # except Exception as e:
        #     print(f"Malware_DetectionFamily Path issue is {str(e)}")
        img_path = self._generatedImageAddress_With_Name
        img_height, img_width = 64, 64
        img = tf.keras.utils.load_img(img_path, target_size=(img_height, img_width))
        img_array = tf.keras.preprocessing.image.img_to_array(img)
        img_array = np.array(img).astype(np.float32)
        img_array = np.expand_dims(img_array, axis=0)
        img_array /= 255.

        y_pred = model.predict(img_array)
        predicted_class = np.argmax(y_pred, axis=1)
        class_label = predicted_class[0]
        get_confidence = y_pred[0][class_label]

        class_labels = ["adware_img", "backdoor", 'botnet', 'downloader', 'keylogger', 'ransomware', 'rootkit',
                        'spyware', 'trojan', 'virus', 'worm']
        get_MalwareFamily = class_labels[class_label]
        confidence = get_confidence * 100
        return get_MalwareFamily, confidence

    def _Verifying_Prediction(self):
        obj = ConfirmPredition(fileName=self._malware_Address_With_Name)
        file_information = obj.verifyPredictions()

        malware_family = file_information.get("Triage", {}).get("Malware Family", "Unknown")
        tags_list = file_information.get("Triage", {}).get("Tags", "Unknown")
        allTags_list = file_information.get("AllTags")
        return malware_family, tags_list, allTags_list

    def malwareFamily_Recogization(self):
        familyFromCNN, confidenceFromCNN = self._getFamily_Prediction_From_CNNModel()
        familyFromMultiClassification, confidenceFromMultiClassification = self._getFamily_Prediction_From_MultiClassImageClassification()
        familyFromResNet, confidenceFromResNet = self._getFamily_Prediction_From_ResNet()

        malware_family, tag_List, allTags_list = self._Verifying_Prediction()
        print(
            f"Malware Family From MalwareBazzar {malware_family} \n and First Tags is {tag_List} \n Second Tags is {allTags_list}")
        fam_labels = ["Adware_img", "Backdoor", 'Botnet', 'Downloader', 'Keylogger', 'Ransomware', 'Rootkit',
                      'Spyware', 'Trojan', 'Virus', 'Worm']
        if familyFromCNN == malware_family or familyFromMultiClassification == malware_family or familyFromResNet == malware_family:
            familyDic = {"FamilyFromCNN": familyFromCNN, "CNN_Confidence": confidenceFromCNN,
                         "FamilyFromMultiClassifier": familyFromMultiClassification,
                         "MultiClassifier_Confidence": confidenceFromMultiClassification,
                         "FamilyFromResNet": familyFromResNet, "ResNet_Confidence": confidenceFromResNet
                         }
            print(f"Inside MalwareFemily first {familyDic}")
            return familyDic, malware_family
        elif familyFromCNN in tag_List:
            # mylist=[familyFromCNN,confidenceFromCNN]
            print(f"Inside MalwareFemily Cnn {tag_List}")
            return tag_List
        elif familyFromMultiClassification in tag_List:
            # mylist = [familyFromMultiClassification, confidenceFromMultiClassification]
            print(f"Inside MalwareFemily MCCN {tag_List}")
            return tag_List
        elif familyFromResNet in tag_List:
            # mylist = [familyFromResNet, confidenceFromResNet]
            print(f"Inside MalwareFemily ResNet {tag_List}")
            return tag_List
        elif len(tag_List) > 0:
            list2_updated = []
            for item in tag_List:
                if "." in item:
                    item_part = item.split(".")[0]
                    list2_updated.append(item_part)
                elif ":" in item:
                    item_part = item.split(":")[0]
                    list2_updated.append(item_part)
                else:
                    list2_updated.append(item)
            print(f"Remove dots and value {list2_updated}")
            matching_items = []
            for item1 in fam_labels:
                for item2 in list2_updated:
                    if item1[0].isupper() and item1.lower() == item2.lower():
                        matching_items.append(item1)

            print("Matching items:", matching_items)
            if len(matching_items) > 0:
                return matching_items
            elif len(tag_List)>0:
                list2_updated = []
                for item in allTags_list:
                    if "." in item:
                        item_part = item.split(".")[0]
                        list2_updated.append(item_part)
                    elif ":" in item:
                        item_part = item.split(":")[0]
                        list2_updated.append(item_part)
                    else:
                        list2_updated.append(item)
                print(f"Remove dots and value {list2_updated}")
                matching_items = []
                for item1 in fam_labels:
                    for item2 in list2_updated:
                        if item1[0].isupper() and item1.lower() == item2.lower():
                            matching_items.append(item1)

                print("Matching items:", matching_items)
                return matching_items
            else:
                return False


        elif len(tag_List) > 0 or len(allTags_list) > 0:

            list2_updated = []
            for item in allTags_list:
                if "." in item:
                    item_part = item.split(".")[0]
                    list2_updated.append(item_part)
                elif ":" in item:
                    item_part = item.split(":")[0]
                    list2_updated.append(item_part)
                else:
                    list2_updated.append(item)
            print(f"Remove dots and value {list2_updated}")
            matching_items = []
            for item1 in fam_labels:
                for item2 in list2_updated:
                    if item1[0].isupper() and item1.lower() == item2.lower():
                        matching_items.append(item1)

            print("Matching items:", matching_items)
            if len(matching_items)>0:
                return matching_items
            else:
                return False
            # list1_lower = [name.lower() for name in allTags_list]
            # list2_lower = [name.lower() for name in fam_labels]
            # for name1 in list1_lower:
            #     if name1 in list2_lower:
            #         return list1_lower
            # return False

        else:
            return False

    def sendMalwareFamily(self):
        familyFromCNN, confidenceFromCNN = self._getFamily_Prediction_From_CNNModel()
        familyFromMultiClassification, confidenceFromMultiClassification = self._getFamily_Prediction_From_MultiClassImageClassification()
        familyFromResNet, confidenceFromResNet = self._getFamily_Prediction_From_ResNet()
        familyDic = {"FamilyFromCNN": familyFromCNN, "CNN_Confidence": confidenceFromCNN,
                     "FamilyFromMultiClassifier": familyFromMultiClassification,
                     "MultiClassifier_Confidence": confidenceFromMultiClassification,
                     "FamilyFromResNet": familyFromResNet, "ResNet_Confidence": confidenceFromResNet
                     }
        return familyDic
