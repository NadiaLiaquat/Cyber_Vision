
import keras.utils as image
from PIL import ImageFile


ImageFile.LOAD_TRUNCATED_IMAGES = True

import numpy as np
from keras.models import load_model
from keras.preprocessing import image
from keras.utils import load_img
import tensorflow as tf
import os


class MalwareDetectionResNet:
    def __init__(self, imagePath):
        self.imagePath = imagePath

    def detectMalware_ResNet(self):
        # model = load_model('E:\Python-Projects\MachineLearning\Models\my_modelResNet.h5')
        # model = load_model('E:\Python-Projects\MachineLearning\Models\my_modelResNet.h5')
        try:

            current_dir = os.path.dirname(__file__)
            # model_path = os.path.join(current_dir, 'MachineLearning', 'Models', 'my_modelResNet.h5')
            model_path = os.path.join(current_dir, 'Models', 'my_modelResNet.h5')
            model = load_model(model_path)
        except Exception as e:
            print(f"Error Found in here {str(e)}")
        img_height, img_width = 64, 64
        img_path = self.imagePath
        # Load and preprocess the input image
        # img = image.load_img(img_path, target_size=(img_height, img_width))
        img = tf.keras.utils.load_img(img_path, target_size=(img_height, img_width))
        img_array = tf.keras.preprocessing.image.img_to_array(img)
        img_array = np.array(img).astype(np.float32)
        img_array = np.expand_dims(img_array, axis=0)
        img_array /= 255.

        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction, axis=1)

        class_label = predicted_class[0]
        get_confidence = prediction[0][class_label]

        class_labels = ["Not Malware", "Malware"]

        get_MalwareFamily = class_labels[class_label]
        confidence = int(get_confidence * 100)
        return get_MalwareFamily, confidence



